internal class ExcelUtils
{

    public static List<ExcelData> ReadExcelData(string excelFilePath, string sheetName)
    {
        List<ExcelData> excelDataList = new List<ExcelData>();
        Encoding.RegisterProvider(System.Text.CodePagesEncodingProvider.Instance);

        using (var stream = new FileStream(excelFilePath, FileMode.Open, FileAccess.Read, FileShare.ReadWrite))
        {
            using (var reader = ExcelReaderFactory.CreateReader(stream))
            {
                var result = reader.AsDataSet(new ExcelDataSetConfiguration()
                {
                    ConfigureDataTable = (_) => new ExcelDataTableConfiguration()
                    {
                        UseHeaderRow = true,
                    }
                });

                var dataTable = result.Tables[sheetName];

                if (dataTable != null)
                {
                    foreach (DataRow row in dataTable.Rows)
                    {
                        ExcelData excelData = new ExcelData
                        {
                            FirstName = GetValueOrDefault(row, "firstname"),
                            LastName = GetValueOrDefault(row, "lastname"),
                            Email = GetValueOrDefault(row, "email"),
                            Password = GetValueOrDefault(row, "pwd"),
                            ConfirmPassword = GetValueOrDefault(row, "conpwd"),
                            MobileNumber = GetValueOrDefault(row, "mbno")
                        };

                        excelDataList.Add(excelData);
                    }
                }
                else
                {
                    Console.WriteLine($"Sheet '{sheetName}' not found in the Excel file.");
                }
            }
        }

        return excelDataList;
    }

    static string GetValueOrDefault(DataRow row, string columnName)
    {
        Console.WriteLine(row + "  " + columnName);
        return row.Table.Columns.Contains(columnName) ? row[columnName]?.ToString() : null;
    }
}

public class ExcelData
{
    public string? FirstName { get; set; }
    public string? LastName { get; set; }
    public string? Email { get; set; }
    public string? Password { get; set; }
    public string? ConfirmPassword { get; set; }
    public string? MobileNumber { get; set; }
}

 internal class LoginModuleTests : CoreCodes
 {

     [Test]
     public void CreateAccountTest()
     {
         HomePage bchp = new(driver);

         bchp.ClickCreateAnAccountLink();
         Thread.Sleep(2000);

             Assert.That(driver?.FindElement(By.XPath("//div[" +
                 "@class='modal-inner-wrap']//following::h1[2]")).Text,
                 Is.EqualTo("Create an Account"));
        
         string? currDir = Directory.GetParent(@"../../../")?.FullName;
         string? excelFilePath = currDir + "/TestData/InputData.xlsx";
         string? sheetName = "CreateAccount";

         List<ExcelData> excelDataList = ExcelUtils.ReadExcelData(excelFilePath, sheetName);

         foreach (var excelData in excelDataList)
         {
         
             string? firstName = excelData?.FirstName;
             string? lastName = excelData?.LastName;
             string? email = excelData?.Email;
             string? pwd = excelData?.Password;
             string? conpwd = excelData?.ConfirmPassword;
             string? mbno = excelData?.MobileNumber;

             Console.WriteLine($"First Name: {firstName}, Last Name: {lastName}, Email: {email}, Password: {pwd}, Confirm Password: {conpwd}, Mobile Number: {mbno}");


             bchp.CreateAccount(firstName, lastName, email, pwd, conpwd, mbno);
             // Assert.That(""."")

         }

     }
   
